---
id: ISO/DIS17978-2
type: standard
schema_version: v1.4.1
title:
- language: en
  script: Latn
  content: Road vehicles
  type: title-intro
  format: text/plain
- language: en
  script: Latn
  content: Service-oriented vehicle diagnostics (SOVD)
  type: title-main
  format: text/plain
- language: en
  script: Latn
  content: 'Part 2: Use cases definition'
  type: title-part
  format: text/plain
- language: en
  script: Latn
  content: 'Road vehicles - Service-oriented vehicle diagnostics (SOVD) - Part 2:
    Use cases definition'
  type: main
  format: text/plain
- language: fr
  script: Latn
  content: Véhicules routiers
  type: title-intro
  format: text/plain
- language: fr
  script: Latn
  content: Diagnostic Véhicule Orienté Services (SOVD)
  type: title-main
  format: text/plain
- language: fr
  script: Latn
  content: 'Partie 2: Définition des cas d’usage'
  type: title-part
  format: text/plain
- language: fr
  script: Latn
  content: 'Véhicules routiers - Diagnostic Véhicule Orienté Services (SOVD) - Partie
    2: Définition des cas d’usage'
  type: main
  format: text/plain
source:
- type: src
  content: https://www.iso.org/standard/86586.html
- type: rss
  content: https://www.iso.org/contents/data/standard/08/65/86586.detail.rss
docidentifier:
- content: ISO/DIS 17978-2
  type: ISO
  primary: true
- content: ISO/DIS 17978-2(E)
  type: iso-reference
- content: urn:iso:std:iso:17978:-2:stage-draft
  type: URN
docnumber: '17978'
contributor:
- role:
  - type: publisher
  organization:
    uri:
    - content: www.iso.org
    name:
    - content: International Organization for Standardization
    abbreviation:
      content: ISO
edition:
  content: '1'
language:
- en
- fr
script:
- Latn
abstract:
- language: en
  script: Latn
  content: "This series of documents defines the use cases and their associated APIs
    for the SOVD and fall within the scope already defined by ISO 20077-1 \"ExVe”\nThe
    methodology adopted for the implementation of an SOVD API is intended to follow
    the definitions in ISO 20077 (all parts) regarding “Extended Vehicle (ExVe)” (definitions,
    basic principles, rules, uses cases, API, etc...). \nIt specifies the way to diagnose
    the vehicle via High Performance Computer (HPC) and  Electronic Control Unit (ECU).
    The SOVD API provides, in the ExVe perimeter a unified access to ECUs and HPCs.
    This access can be performed remotely (e.g., backend or cloud), nearby in the
    repair shop (e.g., repair shop test equipment), or in the vehicle (e.g., on-board
    application).\nThe SOVD API leverages existing technologies: \n• The API follows
    the Representational State Transfer (REST) principles and uses Javascript Object
    Notation (JSON) for encoding the transmitted data.\n• SOVD uses Hypertext Transfer
    Protocol (HTTP) 1.1 but for achieving the best communication performance HTTP/2
    is recommended. No HTTP/2 specific features are used.\n• The SOVD API utilizes
    the OpenAPI specification to define the API as well as the diagnostic capabilities
    of the vehicle.\n• The authentication and authorization of clients builds upon
    OpenID Connect and Open Authentication (OAuth) 2.0, but a vehicle manufacturer
    may use other authentication mechanism like certificates if required.\nThe SOVD
    API provides the following functions in the perimeter of the Extended Vehicle:\n•
    Clients can access the faults, including reading the fault entries, reading environment
    data, and deleting fault entries.\n• Measurements and identifications from all
    entities in the vehicle can be read. In addition, identifications may be written
    as well.\n• SOVD supports the execution of routines, I/O controls, and software
    functions. Their execution can only be performed in certain modes or states. Thus,
    an SOVD client can set the component into a specific mode.\n• The configuration
    of a vehicle (e.g., equipment, country, customer demand, variant coding etc.)
    can be read and written using the SOVD API.\n• SOVD provides an interface to initiate
    and monitor a software update for a vehicle\n• SOVD provides access to Extended
    Vehicle logging information \nWith these features SOVD covers the entire chain
    of the vehicle life cycle: engineering (development), manufacturing (production),
    storage park, sales, vehicle operation (usage), maintenance and repair, technical
    inspection, recycling (re-use).\n\nThis document contains the description of the
    following use cases:\n• remote use cases (diagnostic, repair, prognostic,) \n•
    proximity use cases (diagnostic, repair, prognostic,)\n• in vehicle apps use cases"
- language: fr
  script: Latn
  content: "This series of documents defines the use cases and their associated APIs
    for the SOVD and fall within the scope already defined by ISO 20077-1 \"ExVe”\nThe
    methodology adopted for the implementation of an SOVD API is intended to follow
    the definitions in ISO 20077 (all parts) regarding “Extended Vehicle (ExVe)” (definitions,
    basic principles, rules, uses cases, API, etc...). \nIt specifies the way to diagnose
    the vehicle via High Performance Computer (HPC) and  Electronic Control Unit (ECU).
    The SOVD API provides, in the ExVe perimeter a unified access to ECUs and HPCs.
    This access can be performed remotely (e.g., backend or cloud), nearby in the
    repair shop (e.g., repair shop test equipment), or in the vehicle (e.g., on-board
    application).\nThe SOVD API leverages existing technologies: \n• The API follows
    the Representational State Transfer (REST) principles and uses Javascript Object
    Notation (JSON) for encoding the transmitted data.\n• SOVD uses Hypertext Transfer
    Protocol (HTTP) 1.1 but for achieving the best communication performance HTTP/2
    is recommended. No HTTP/2 specific features are used.\n• The SOVD API utilizes
    the OpenAPI specification to define the API as well as the diagnostic capabilities
    of the vehicle.\n• The authentication and authorization of clients builds upon
    OpenID Connect and Open Authentication (OAuth) 2.0, but a vehicle manufacturer
    may use other authentication mechanism like certificates if required.\nThe SOVD
    API provides the following functions in the perimeter of the Extended Vehicle:\n•
    Clients can access the faults, including reading the fault entries, reading environment
    data, and deleting fault entries.\n• Measurements and identifications from all
    entities in the vehicle can be read. In addition, identifications may be written
    as well.\n• SOVD supports the execution of routines, I/O controls, and software
    functions. Their execution can only be performed in certain modes or states. Thus,
    an SOVD client can set the component into a specific mode.\n• The configuration
    of a vehicle (e.g., equipment, country, customer demand, variant coding etc.)
    can be read and written using the SOVD API.\n• SOVD provides an interface to initiate
    and monitor a software update for a vehicle\n• SOVD provides access to Extended
    Vehicle logging information \nWith these features SOVD covers the entire chain
    of the vehicle life cycle: engineering (development), manufacturing (production),
    storage park, sales, vehicle operation (usage), maintenance and repair, technical
    inspection, recycling (re-use).\n\nThis document contains the description of the
    following use cases:\n• remote use cases (diagnostic, repair, prognostic,) \n•
    proximity use cases (diagnostic, repair, prognostic,)\n• in vehicle apps use cases"
status:
  stage:
    content: '40'
  substage:
    content: '00'
copyright:
- from: '2025'
  owner:
  - organization:
      name:
      - content: ISO/DIS
place:
- formatted_place: Geneva
ext:
  schema_version: v1.0.5
  doctype:
    content: international-standard
  flavor: iso
  editorialgroup:
    technical_committee:
    - number: 22
      type: TC
      identifier: ISO/TC 22/SC 31
      content: Data communication
  ics:
  - code: 01.040.43
    text: Road vehicle engineering (Vocabularies)
  - code: 43.040.15
    text: Car informatics. On board computer systems
  structuredidentifier:
    type: ISO
    project_number:
      content: '86586'
